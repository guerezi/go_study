package memory

import (
	"context"
	"testing"

	"imobiliaria/internal/models"
)

// GENERATED BY COPILOT. DO NOT EDIT.

func TestCreateUser(t *testing.T) {
	memRepo := NewMemory()
	ctx := context.Background()
	age := 12

	user := &models.User{
		Name:  "John Doe",
		Email: "john.doe@example.com",
		Age:   &age,
	}

	createdUser, err := memRepo.CreateUser(ctx, user)
	if err != nil {
		t.Fatalf("expected no error, got %v", err)
	}

	if createdUser.ID != 1 {
		t.Errorf("expected user ID to be 1, got %d", createdUser.ID)
	}

	if createdUser.Name != user.Name || createdUser.Email != user.Email {
		t.Errorf("expected user data to match, got %+v", createdUser)
	}
}

func TestGetUser(t *testing.T) {
	memRepo := NewMemory()
	ctx := context.Background()

	user := &models.User{
		Name:  "Jane Doe",
		Email: "jane.doe@example.com",
	}

	createdUser, err := memRepo.CreateUser(ctx, user)
	if err != nil {
		t.Fatalf("expected no error, got %v", err)
	}

	retrievedUser, err := memRepo.GetUser(ctx, createdUser.ID)
	if err != nil {
		t.Fatalf("expected no error, got %v", err)
	}

	if retrievedUser.ID != createdUser.ID {
		t.Errorf("expected user ID to be %d, got %d", createdUser.ID, retrievedUser.ID)
	}

	if retrievedUser.Name != createdUser.Name || retrievedUser.Email != createdUser.Email {
		t.Errorf("expected user data to match, got %+v", retrievedUser)
	}
}

func TestGetUserNotFound(t *testing.T) {
	memRepo := NewMemory()
	ctx := context.Background()

	_, err := memRepo.GetUser(ctx, 999)
	if err == nil {
		t.Fatalf("expected an error for non-existent user, got nil")
	}
}
